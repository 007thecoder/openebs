#!/bin/bash

usage() {
    err "Invalid usage. Usage: "
    err "\t$0 init"
    err "\t$0 mount <mount dir> <json params>"
    err "\t$0 unmount <mount dir>"
    err "\t$0 getvolumename <json params>"
    exit 1

}
err() {
    echo -ne $* 1>&2
}

log() {
    echo -ne $* >&1
}

ismounted() {
    MOUNT=`findmnt -n ${MNTPATH} 2>/dev/null | cut -d' ' -f1`
    if [ "${MOUNT}" == "${MNTPATH}" ]; then
        echo "1"
    else
        echo "0"
    fi
}

#TBD 
#Form the yaml spec to be sent to the OpenEBS URL
# using the input parameters sent through kubectl/yaml
#createvolumespec() {
#    Args:
#        - VOLUMENAME
#        - VOLUMESIZE
#    Create a file called - openebs-${VOLUMENAME}-pvc.yaml in the current directory
#      with the following content:
#---------------------------------------------------------
# kind: PersistentVolumeClaim
# apiVersion: v1
# metadata:
#  name: ${VOLUMENAME}
# spec:
#  accessModes:
#    - ReadWriteOnce
#  resources:
#    requests:
#      storage: ${VOLUMESIZE}
#---------------------------------------------------------
#}


#TBD 
#Clear the volumespec created for sending to OpenEBS URL
#clearvolumespec() {
#    Args:
#        - VOLUMENAME
#    Delete the file - openebs-${VOLUMENAME}-pvc.yaml in the current directory
#    (This file will be present, if the previous volume was created.)
#}

#TBD
#This method will check with OpenEBS URL if the volume already exists
#checkvolumeexists() {
#    Args:
#        - VOLUMENAME
#        - OPENEBS_API_URL
#    Steps:
#        - curl ${OPENEBS_API_URL}/volume/info/${VOLUMENAME}
#          the success response will be:
#          ---------------------------------------------
#          {
#             "Spec": {"AccessModes":null,"Capacity":null,"ClaimRef":null,"OpenEBS":{ "volumeID":"" },PersistentVolumeReclaimPolicy":"","StorageClassName":"" },
#             "Status": {"Message":"","Phase":"","Reason":"running"},
#             "annotations":{"targetportal":"172.28.128.101:3260","iqn":"iqn.2016-09.com.openebs.jiva:demo-vsm1-vol1"},
#             "creationTimestamp":null,
#             "name":"demo-vsm1-vol1"
#          }
#          ---------------------------------------------
#          return success or extract the target portal, iqn details from the response
#}

#TBD
#This method will issue the create-volume api to OpenEBS URL
#createvolume() {
#    Args:
#        - VOLUMENAME
#        - VOLUMESIZE
#        - OPENEBS_API_URL
#    Steps:
#        - createvolumespec( ${VOLUMENAME}, ${VOLUMESIZE})
#        - curl -k -H "Content-Type: application/yaml" \
#            -XPOST -d"$(cat ./openebs-${VOLUMENAME}-pvc.yaml)" \
#            ${OPENEBS_API_URL}/volumes/
#        - wait in loop, till volume is created
#            checkvolumeexists(${VOLUMENAME}, ${OPENEBS_API_URL})
#}

#TBD - May not be used with the current version of FlexVolume
#This method will issue the delete-volume api to OpenEBS URL
#deletevolume() {
#    Args:
#        - VOLUMENAME
#        - OPENEBS_API_URL
#    Steps:
#        - deletevolumespec()
#        - curl ${OPENEBS_API_URL}/volume/delete/${VOLUMENAME}
#}

domount() {
    MNTPATH="$1"
    VOLUME_SRC=$(echo "$2" | jq -r '.source')
    FSTYPE=$(echo "$2" | jq -r '.["kubernetes.io/fsType"]')
    OPENEBS_API_URL=$(echo "$2" | jq -r '.openebsApiUrl')
    SIZE=$(echo "$2" | jq -r '.size')
    DEBUG=$(echo "$2" | jq -r '.debug')
    MOUNT_OPTIONS=$(echo $2 | jq -r '.mountOptions')

    # Print logs
    LOGS="Mount Path is: $MNTPATH\nVolume Source is: $VOLUME_SRC\nFile System of the Volume is:$FSTYPE\nOpenEBS API URL: $OPENEBS_API_URL\nSize of the Volume: $SIZE\nMount Options for the Volume: $MOUNT_OPTIONS\nJSON Data received by openebs-iscsi driver:\n$2"

    if [ ${DEBUG} == "1" ] ; then
        sudo mkdir -p /tmp/logs/openebs-iscsi/
        echo -e $LOGS >>  /tmp/logs/openebs-iscsi/openebs-iscsi.log
    fi

    if [ $(ismounted) -eq 1 ] ; then
        log "{\"status\": \"Success\"}"
        exit 0
    fi

    sudo mkdir -p ${MNTPATH} &> /dev/null

    #The following two steps will be replaced by creating the volume
    # by issuing curl requests to OpenEBS API SERVER. The pseudo code
    # is as follows:
    #
    #targetportal, iqn, rc = checkvolumeexists()
    #if rc is failed {
    #  createvolumespec()
    #  createvolume()
    #  targetportal, iqn, rc = checkvolumeexists()
    #}
    #
    #use iscsiadm to connect to targetportal,iqn,lun1
    #format the mounted disk
    #mount the volume
    #clearvolumespec()

    sudo mkdir -p ${VOLUME_SRC} &> /dev/null
    sudo mount -o rw,noexec,nosuid,nodev,bind "${VOLUME_SRC}" "${MNTPATH}" &> /dev/null

    if [ $? -ne 0 ]; then
        2>&1
        err '{ "status": "Failure", "message": "Failed to mount device '${VOLUME_SRC}' at '${MNTPATH}' , volume_src: '${VOLUME_SRC}'"}'
        exit 1
    fi
    log '{"status": "Success"}'
    exit 0
}

unmount() {
    MNTPATH=$1
    if [ $(ismounted) -eq 0 ] ; then
      log "{\"status\": \"Success\"}"
      exit 0
    fi

    umount ${MNTPATH} &> /dev/null
    if [ $? -ne 0 ]; then
      err "{ \"status\": \"Failed\", \"message\": \"Failed to unmount volume at ${MNTPATH}\"}"                exit 1
    fi
    log '{"status": "Success"}'
    exit 0
}

getvolumename() {
    SOURCE=$(echo $2 | jq -r '.source')
    MOUNT_OPTIONS=$(echo $2 | jq -r '.mountOptions')
    log "{\"status\": \"Success\", \"volumeName\": \"${SOURCE}/${MOUNT_OPTIONS}\"}"
    exit 0
}

op=$1

if [ "$op" = "init" ]; then
    log '{"status": "Success"}'
    exit 0
fi

if [ $# -lt 2 ]; then
    usage
fi

shift

case "$op" in
    mount)
        domount $*
        ;;
    unmount)
        unmount $*
        ;;
    getvolumename)
        getvolumename $*
        ;;
    *)

err "{ \"status\": \"Not supported\" }"
exit 1

esac

exit 1;

