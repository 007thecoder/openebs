# -*- mode: ruby -*-
# vi: set ft=ruby :

#This is parameterized Vagrantfile, that can used for any of the following:
#- Launch VMs auto-configured with kubernetes cluster with dedicated openebs
#- Launch VMs auto-configured with kubernetes cluster with hyperconverged openebs
#- Launch VMs for manual installation of kubernetes or maya clusters or both 
#
#The configurable options include:
#- Specify the number of VMs / node types 
#- Specify the CPU/RAM for each type of node
#- Specify the desired kubernetes cluster installation option - kubeadm, cargo, manual
#- Specify the base operating system - Ubuntu, CentOS, etc., 
#- Specify the kubernetes pod network - flannel, weave, calico, etc,. 
#- In case of dedicated, specify the storage network - host, etc.,

#Specify the OpenEBS Deployment Mode - dedicated=1 (default) or hyperconverged=2
DEPLOY_MODE_NONE = 0 
DEPLOY_MODE_DEDICATED = 1
DEPLOY_MODE_HC = 2
DEPLOY_MODE=ENV['OPENEBS_DEPLOY_MODE'] || 1

#Specify the release versions to be installed
MAYA_RELEASE_TAG = ENV['MAYA_RELEASE_TAG'] || "0.0.5"

#Specify the number of Kubernetes Master nodes, CPU/RAM per node. 
KM_NODES = ENV['KM_NODES'] || 1
KM_MEM = ENV['KM_MEM'] || 2048
KM_CPUS = ENV['KM_CPUS'] || 2

#Specify the number of Kubernetes Minion nodes, CPU/RAM per node. 
KH_NODES = ENV['KH_NODES'] || 1
KH_MEM = ENV['KH_MEM'] || 1024
KH_CPUS = ENV['KH_CPUS'] || 1

#Specify the number of OpenEBS Master nodes, CPU/RAM per node. (Applicable only for dedicated mode)
MM_NODES = ENV['MM_NODES'] || 1
MM_MEM = ENV['MM_MEM'] || 1024
MM_CPUS = ENV['MM_CPUS'] || 1

#Specify the number of OpenEBS Storage Host nodes, CPU/RAM per node. (Applicable only for dedicated mode)
MH_NODES = ENV['MH_NODES'] || 1
MH_MEM = ENV['MH_MEM'] || 1024
MH_CPUS = ENV['MH_CPUS'] || 1

# Don't touch below this line, unless you know what you're doing!

# Vagrantfile API/syntax version.
VAGRANTFILE_API_VERSION = "2"
Vagrant.require_version ">= 1.9.1"

#Local Variables
machine_ip_address = %Q(ifconfig | grep -oP "inet addr:\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}" | grep -oP "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}" | tail -n 2 | head -n 1)
master_ip_address = ""
host_ip_address = ""
get_token = ""
token = ""


# Generic installer script common for server(s) & client(s)
# This expects arguments that provide runtime values
$kubeinstaller = <<SCRIPT
#!/bin/bash
echo Running the Kubernetes installer...

# Update apt and get dependencies
sudo apt-get update
sudo apt-get install -y unzip curl wget

# Install docker and K8s
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
cat <<EOF > /etc/apt/sources.list.d/kubernetes.list
deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF
apt-get update
# Install docker if you don't have it already.
apt-get install -y docker.io
apt-get install -y kubelet kubeadm kubectl kubernetes-cni

#Install JSON Parser for patching kube-proxy
apt-get install -y jq
SCRIPT

$kubeadminit = <<SCRIPT
#!/bin/bash
echo Will run the kubeadm init script ...

#Run the kubeadm command with the master-ip
kubeadm init --api-advertise-addresses=$1

#Install the CNI network for Kubernetes
kubectl create -f https://git.io/weave-kube
SCRIPT

$kubeproxypatch =<<SCRIPT

echo Patching the kube-proxy for CNI Networks...

#Patch kube-proxy to run with --proxy-mode=userspace
kubectl -n kube-system get ds -l 'component=kube-proxy' -o json | jq '.items[0].spec.template.spec.containers[0].command |= .+ ["--proxy-mode=userspace"]' | kubectl apply -f - && kubectl -n kube-system delete pods -l 'component=kube-proxy'
SCRIPT


$mayainstaller = <<SCRIPT
#!/bin/bash
echo Running the Maya installer...

# Update apt and get dependencies
sudo apt-get update
sudo apt-get install -y unzip curl wget

# Install Maya binaries
wget https://github.com/openebs/maya/releases/download/$1/maya-linux_amd64.zip
unzip maya-linux_amd64.zip
sudo mv maya /usr/bin
rm -rf maya-linux_amd64.zip

SCRIPT

$mayavsmsetup = <<SCRIPT
#Copy any maya job files if available
mkdir -p /home/ubuntu/demo/maya/spec
cd /vagrant/
cp -u demo*.hcl /home/ubuntu/demo/maya/spec 2>/dev/null || :

SCRIPT

$kubepodsetup = <<SCRIPT
#Copy any pod yaml files if available
mkdir -p /home/ubuntu/demo/k8s/spec
cd /vagrant/
cp -u demo*.yaml /home/ubuntu/demo/k8s/spec 2>/dev/null || :

SCRIPT

$kubeminionsetup = <<SCRIPT
#Copy iscsid.conf file with increased timeout values
cd /vagrant/
cp -u iscsid.conf /etc/iscsi/ 2>/dev/null || :

SCRIPT

	
	
required_plugins = %w(vagrant-cachier vagrant-triggers)

required_plugins.each do |plugin|
  need_restart = false
  unless Vagrant.has_plugin? plugin
    system "vagrant plugin install #{plugin}"
    need_restart = true
  end
  exec "vagrant #{ARGV.join(' ')}" if need_restart
end


def configureVM(vmCfg, hostname, cpus, mem)

  vmCfg.vm.box = "ubuntu/xenial64"
  
  #Default timeout is 300 sec for boot. 
  #Uncomment the following line and set the desired timeout value. 
  #vmCfg.vm.boot_timeout = 300
	
  vmCfg.vm.hostname = hostname
  vmCfg.vm.network "private_network", type: "dhcp"

  
  #Adding Vagrant-cachier
  if Vagrant.has_plugin?("vagrant-cachier")
     vmCfg.cache.scope = :machine
     vmCfg.cache.enable :apt
     vmCfg.cache.enable :gem     
  end
  
  # Set resources w.r.t Virtualbox provider
  vmCfg.vm.provider "virtualbox" do |vb|
    #Uncomment the following line, to launch the Virtual Box console. 
    #Useful for debugging cases, where the VM doesn't allow login into console
    #vb.gui = true
    vb.memory = mem
    vb.cpus = cpus
    vb.customize ["modifyvm", :id, "--cableconnected1", "on"]
  end  
  
  return vmCfg
end

# Entry point of this Vagrantfile
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|


  # K8s Master related only !!
  1.upto(KM_NODES.to_i) do |i|
    hostname = "kubemaster-%02d" % [i]
    cpus = KM_CPUS
    mem = KM_MEM
    
    config.vm.define hostname do |vmCfg|
      vmCfg = configureVM(vmCfg, hostname, cpus, mem)
      # Script will make some directories before installation procedure      
      vmCfg.vm.provision :shell, inline: $kubeinstaller, privileged: true
      vmCfg.vm.provision :shell, inline: "echo Setting up the Master using IPAddress: $1", :args => "`#{machine_ip_address}`"      
      #Update the hosts file with the IP obtained.
      vmCfg.vm.provision :shell, inline: 'sed -i "/$1/ s/.*/$2\t$3/g" /etc/hosts', :args => "#{hostname} `#{machine_ip_address}` #{hostname}", privileged: true      
      vmCfg.vm.provision :shell, inline: $kubeadminit, :args => "`#{machine_ip_address}`", privileged: true
      
      #Patching kube-proxy so that the pods are created properly.
      vmCfg.vm.provision :shell, inline: $kubeproxypatch, privileged: false
      vmCfg.vm.provision :shell, inline: $kubepodsetup, privileged: false
    end     
  end
  
  # K8s Minions related only !!
  1.upto(KH_NODES.to_i) do |i|
    hostname = "kubeminion-%02d" % [i]
    cpus = KH_CPUS
    mem = KH_MEM
    
    config.vm.define hostname do |vmCfg|
      vmCfg = configureVM(vmCfg, hostname, cpus, mem)
      # Script will make some directories before installation procedure      
      vmCfg.vm.provision :shell, inline: $kubeinstaller, privileged: true
      vmCfg.vm.provision :shell, inline: $kubeminionsetup, privileged: true
      vmCfg.vm.provision :shell, inline: 'sed -i "/$1/ s/.*/$2\t$3/g" /etc/hosts', :args => "#{hostname} `#{machine_ip_address}` #{hostname}", privileged: true
      #We want to run this only when the VM is first provisioned and get the Master IP to join the cluster

      vmCfg.vm.provision :trigger, :force => true, :stdout => true, :stderr => true do |trigger|
         trigger.fire do
            info"Getting the Master IP to join the cluster..."
            master_hostname = "kubemaster-01"
            get_ip_address = %Q(vagrant ssh #{master_hostname}  -c 'ifconfig | grep -oP "inet addr:\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}" | grep -oP "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}" | tail -n 3 | head -n 1')            
            master_ip_address = `#{get_ip_address}`            
            if master_ip_address == ""
               info"The Kubernetes Master is down, bring it up and manually run:"
               info"kubeadm join --token=<token> <master_ip_address>"
               info"in order to join the cluster."
               info"The Token can be obtained by running the following command on the Master Node:"
               info"kubectl -n kube-system get secret clusterinfo -o yaml | grep token-map | cut -d \":\" -f2 | cut -d \" \" -f2 | base64 -d | sed \"s|{||g;s|}||g\" | sed \"s|:|.|g\" | xargs echo"
            else                           
               get_token = %Q(vagrant ssh #{master_hostname} -c 'kubectl -n kube-system get secret clusterinfo -o yaml | grep token-map | cut -d ":" -f2 | cut -d " " -f2 | base64 -d | sed "s|{||g;s|}||g" | sed "s|:|.|g" | xargs echo')
               token = `#{get_token}`
               get_ip_address = %Q(vagrant ssh #{hostname}  -c 'ifconfig | grep -oP "inet addr:\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}" | grep -oP "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}" | tail -n 2 | head -n 1')      
               host_ip_address = `#{get_ip_address}`
               @machine.communicate.sudo("echo \"#{master_ip_address.strip} #{master_hostname}\" >> /etc/hosts")
               append_to_hosts = %Q(vagrant ssh #{master_hostname} -c 'echo #{host_ip_address.strip} #{hostname} | sudo tee -a /etc/hosts')               
               `#{append_to_hosts}`
               info"Setting up the Minion using IPAddress: #{master_ip_address}"
               info"Setting up the Minion using Token: #{token}"
               if token != ""
                  get_cluster_ip = %Q(vagrant ssh #{master_hostname} -c 'kubectl get svc -o yaml | grep clusterIP | cut -d ":" -f2 | cut -d " " -f2')
                  cluster_ip = `#{get_cluster_ip}`
                  @machine.communicate.sudo("kubeadm join --token=#{token.strip} #{master_ip_address.strip}")
                  info"Joining the CNI Network..."
                  @machine.communicate.sudo("route add #{cluster_ip.strip} gw #{master_ip_address.strip}")
               else
                  info"Token cannot be empty. SSH into the Master and run the below command to get the token:"
                  info"kubectl -n kube-system get secret clusterinfo -o yaml | grep token-map | cut -d \":\" -f2 | cut -d \" \" -f2 | base64 -d | sed \"s|{||g;s|}||g\" | sed \"s|:|.|g\" | xargs echo"
               end
            end  
         end
      end
    end
  end
  
  # Maya Master related only !!
  1.upto(MM_NODES.to_i) do |i|
    hostname = "omm-%02d" % [i]
    cpus = MM_CPUS
    mem = MM_MEM
    
    config.vm.define hostname do |vmCfg|
      vmCfg = configureVM(vmCfg, hostname, cpus, mem)
      # Script will make some directories before installation procedure
      vmCfg.vm.provision :shell, inline: $mayainstaller, :args => "#{MAYA_RELEASE_TAG}", privileged: true
      #We want to run this only when the VM is first provisioned and get the Master IP to join the cluster
      vmCfg.vm.provision :trigger, :force => true, :stdout => true, :stderr => true do |trigger|
         trigger.fire do
            info"Getting the Master IP to join the cluster..."            
            get_ip_address = %Q(vagrant ssh #{hostname}  -c 'ifconfig | grep -oP "inet addr:\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}" | grep -oP "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}" | tail -n 2 | head -n 1')            
            master_ip_address = `#{get_ip_address}`            
            if master_ip_address == ""
               info"The Maya Master is down, bring it up and manually run:"
               info"maya setup-omm -self-ip=<master_ip_address>"
               info"in order to join the cluster."               
            else               
	             info"Setting up the node using IPAddress: #{master_ip_address.strip}"                                             
               @machine.communicate.sudo("maya setup-omm -self-ip=#{master_ip_address.strip}")
               @machine.communicate.sudo("echo 'export NOMAD_ADDR=http://#{master_ip_address.strip}:4646' >> /home/ubuntu/.profile")               
            end  
         end
      end
      vmCfg.vm.provision :shell, inline: $mayavsmsetup, privileged: false      
    end     
  end

  # Maya Host related only !!
  1.upto(MH_NODES.to_i) do |i|
    hostname = "osh-%02d" % [i]
    cpus = MH_CPUS
    mem = MH_MEM
    
    config.vm.define hostname do |vmCfg|
      vmCfg = configureVM(vmCfg, hostname, cpus, mem)
      # Script will make some directories before installation procedure
      vmCfg.vm.provision :shell, inline: $mayainstaller, :args => "#{MAYA_RELEASE_TAG}", privileged: true      
      #We want to run this only when the VM is first provisioned and get the Master IP to join the cluster
      vmCfg.vm.provision :trigger, :force => true, :stdout => true, :stderr => true do |trigger|
         trigger.fire do
            info"Getting the Master IP to join the cluster..."
            master_hostname = "omm-01"            
            get_ip_address = %Q(vagrant ssh #{master_hostname}  -c 'ifconfig | grep -oP "inet addr:\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}" | grep -oP "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}" | tail -n 2 | head -n 1')            
            master_ip_address = `#{get_ip_address}`            
            if master_ip_address == ""
               info"The Maya Master is down, bring it up and manually run:"
               info"maya setup-osh -self-ip=<host_ip_address> -omm-ips=<master_ip_address>"
               info"in order to join the cluster."               
            else               
               get_ip_address = %Q(vagrant ssh #{hostname}  -c 'ifconfig | grep -oP "inet addr:\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}" | grep -oP "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}" | tail -n 2 | head -n 1')      
               host_ip_address = `#{get_ip_address}`	       
               info"Setting up the node using IPAddress: #{host_ip_address.strip}"                              
               @machine.communicate.sudo("maya setup-osh -self-ip=#{host_ip_address.strip} -omm-ips=#{master_ip_address.strip}")
               @machine.communicate.sudo("echo 'export NOMAD_ADDR=http://#{master_ip_address.strip}:4646' >> /home/ubuntu/.profile")                              
            end  
         end
      end
    end
  end
end
